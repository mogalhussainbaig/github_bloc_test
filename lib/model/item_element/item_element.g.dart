// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'item_element.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

ItemElement _$ItemElementFromJson(Map<String, dynamic> json) {
  return ItemElement(
    id: json["id"],
    nodeId: json["node_id"],
    name: json["name"],
    fullName: json["full_name"],
    private: json["private"],
    owner: json["owner"] == null ? null : ItemOwner.fromJson(json["owner"]),
    htmlUrl: json["html_url"],
    description: json["description"],
    fork: json["fork"] ?? false,
    url: json["url"],
    forksUrl: json["forks_url"],
    keysUrl: json["keys_url"],
    collaboratorsUrl: json["collaborators_url"],
    teamsUrl: json["teams_url"],
    hooksUrl: json["hooks_url"],
    issueEventsUrl: json["issue_events_url"],
    eventsUrl: json["events_url"],
    assigneesUrl: json["assignees_url"],
    branchesUrl: json["branches_url"],
    tagsUrl: json["tags_url"],
    blobsUrl: json["blobs_url"],
    gitTagsUrl: json["git_tags_url"],
    gitRefsUrl: json["git_refs_url"],
    treesUrl: json["trees_url"],
    statusesUrl: json["statuses_url"],
    languagesUrl: json["languages_url"],
    stargazersUrl: json["stargazers_url"],
    contributorsUrl: json["contributors_url"],
    subscribersUrl: json["subscribers_url"],
    subscriptionUrl: json["subscription_url"],
    commitsUrl: json["commits_url"],
    gitCommitsUrl: json["git_commits_url"],
    commentsUrl: json["comments_url"],
    issueCommentUrl: json["issue_comment_url"],
    contentsUrl: json["contents_url"],
    compareUrl: json["compare_url"],
    mergesUrl: json["merges_url"],
    archiveUrl: json["archive_url"],
    downloadsUrl: json["downloads_url"],
    issuesUrl: json["issues_url"],
    pullsUrl: json["pulls_url"],
    milestonesUrl: json["milestones_url"],
    notificationsUrl: json["notifications_url"],
    labelsUrl: json["labels_url"],
    releasesUrl: json["releases_url"],
    deploymentsUrl: json["deployments_url"],
    createdAt:
        json["created_at"] == null ? null : DateTime.parse(json["created_at"]),
    updatedAt:
        json["updated_at"] == null ? null : DateTime.parse(json["updated_at"]),
    pushedAt:
        json["pushed_at"] == null ? null : DateTime.parse(json["pushed_at"]),
    gitUrl: json["git_url"],
    sshUrl: json["ssh_url"],
    cloneUrl: json["clone_url"],
    svnUrl: json["svn_url"],
    homepage: json["homepage"],
    size: json["size"],
    stargazersCount: json["stargazers_count"],
    watchersCount: json["watchers_count"],
    language: json["language"],
    hasIssues: json["has_issues"],
    hasProjects: json["has_projects"],
    hasDownloads: json["has_downloads"],
    hasWiki: json["has_wiki"],
    hasPages: json["has_pages"],
    hasDiscussions: json["has_discussions"],
    forksCount: json["forks_count"],
    mirrorUrl: json["mirror_url"],
    archived: json["archived"],
    disabled: json["disabled"],
    openIssuesCount: json["open_issues_count"],
    license: json["license"],
    allowForking: json["allow_forking"] ?? false,
    isTemplate: json["is_template"] ?? false,
    webCommitSignoffRequired: json["web_commit_signoff_required"],
    topics: json["topics"] == null
        ? null
        : List<String>.from(json["topics"].map((x) => x)),
    visibility: json["visibility"],
    forks: json["forks"] ?? 0,
    openIssues: json["open_issues"] ?? 0,
    watchers: json["watchers"] ?? 0,
    defaultBranch: json["default_branch"] ?? '',
  );
}

Map<String, dynamic> _$ItemElementToJson(ItemElement instance) =>
    <String, dynamic>{
      "id": instance.id,
      "node_id": instance.nodeId,
      "name": instance.name,
      "full_name": instance.fullName,
      "private": instance.private,
      "owner": instance.owner?.toJson(),
      "html_url": instance.htmlUrl,
      "description": instance.description,
      "fork": instance.fork,
      "url": instance.url,
      "forks_url": instance.forksUrl,
      "keys_url": instance.keysUrl,
      "collaborators_url": instance.collaboratorsUrl,
      "teams_url": instance.teamsUrl,
      "hooks_url": instance.hooksUrl,
      "issue_events_url": instance.issueEventsUrl,
      "events_url": instance.eventsUrl,
      "assignees_url": instance.assigneesUrl,
      "branches_url": instance.branchesUrl,
      "tags_url": instance.tagsUrl,
      "blobs_url": instance.blobsUrl,
      "git_tags_url": instance.gitTagsUrl,
      "git_refs_url": instance.gitRefsUrl,
      "trees_url": instance.treesUrl,
      "statuses_url": instance.statusesUrl,
      "languages_url": instance.languagesUrl,
      "stargazers_url": instance.stargazersUrl,
      "contributors_url": instance.contributorsUrl,
      "subscribers_url": instance.subscribersUrl,
      "subscription_url": instance.subscriptionUrl,
      "commits_url": instance.commitsUrl,
      "git_commits_url": instance.gitCommitsUrl,
      "comments_url": instance.commentsUrl,
      "issue_comment_url": instance.issueCommentUrl,
      "contents_url": instance.contentsUrl,
      "compare_url": instance.compareUrl,
      "merges_url": instance.mergesUrl,
      "archive_url": instance.archiveUrl,
      "downloads_url": instance.downloadsUrl,
      "issues_url": instance.issuesUrl,
      "pulls_url": instance.pullsUrl,
      "milestones_url": instance.milestonesUrl,
      "notifications_url": instance.notificationsUrl,
      "labels_url": instance.labelsUrl,
      "releases_url": instance.releasesUrl,
      "deployments_url": instance.deploymentsUrl,
      "created_at": instance.createdAt?.toIso8601String(),
      "updated_at": instance.updatedAt?.toIso8601String(),
      "pushed_at": instance.pushedAt?.toIso8601String(),
      "git_url": instance.gitUrl,
      "ssh_url": instance.sshUrl,
      "clone_url": instance.cloneUrl,
      "svn_url": instance.svnUrl,
      "homepage": instance.homepage,
      "size": instance.size,
      "stargazers_count": instance.stargazersCount,
      "watchers_count": instance.watchersCount,
      "language": instance.language,
      "has_issues": instance.hasIssues,
      "has_projects": instance.hasProjects,
      "has_downloads": instance.hasDownloads,
      "has_wiki": instance.hasWiki,
      "has_pages": instance.hasPages,
      "has_discussions": instance.hasDiscussions,
      "forks_count": instance.forksCount,
      "mirror_url": instance.mirrorUrl,
      "archived": instance.archived,
      "disabled": instance.disabled,
      "open_issues_count": instance.openIssuesCount,
      "license": instance.license,
      "allow_forking": instance.allowForking,
      "is_template": instance.isTemplate,
      "web_commit_signoff_required": instance.webCommitSignoffRequired,
      "topics": instance.topics,
      "visibility": instance.visibility,
      "forks": instance.forks,
      "open_issues": instance.openIssues,
      "watchers": instance.watchers,
      "default_branch": instance.defaultBranch,
    };
